name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup MySQL
      uses: samin/mysql-action@v1
      with:
        mysql-version: 'latest'
        mysql-database: ${{ secrets.DB_NAME }}
        mysql-user: ${{ secrets.DB_USERNAME }}
        mysql-password: ${{ secrets.DB_PASSWORD }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: |
        chmod +x gradlew
        ./gradlew build

    - name: Docker build & push to Docker hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

    # EC2 배포
    - name: Docker image pull & Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest \
          -e DB_NAME=${{secrets.DB_NAME}} \
          -e DB_USERNAME=${{secrets.DB_USERNAME}} \
          -e DB_PASSWORD=${{secrets.DB_PASSWORD}} \
          -e AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} \
          -e AWS_SECRET_KEY=${{secrets.AWS_SECRET_KEY}} \
          -e AWS_BUCKET_NAME=${{secrets.AWS_BUCKET_NAME}} \
          -e AWS_REGION=${{secrets.AWS_REGION}} \
          -e JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}} \
          -e SLACK_BOT_TOKEN=${{secrets.SLACK_BOT_TOKEN}} \
          sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
          sudo docker image prune -a -f

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
